{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2aeff62f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import sqlite3\n",
    "import random \n",
    "import decimal\n",
    "%matplotlib inline\n",
    "\n",
    "## below we simulate stock price for 100 days, assume the stock price is between 50 and 60\n",
    "## we will calcualte moving average, weighted moving average, exponential moving average of the \n",
    "## stock price and compare if they have significant difference between each other. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c42631ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55.072400000000016"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def AVE(x): ## calculate the moving average\n",
    "    w=[]\n",
    "    a=[]\n",
    "    z=[]\n",
    "    y=[]\n",
    "    for i in range (x):\n",
    "            y.append(random.randint(5000, 6000)/100)\n",
    "            i = i+1\n",
    "    return sum(y)/len(y)\n",
    "AVE(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f84c68aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "54.767400990099006"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def EMA(x): ## calculate the exponential moving average\n",
    "    y=[]\n",
    "    z=[]\n",
    "    for i in range (x):\n",
    "            y.append(random.randint(5000, 6000)/100)\n",
    "            i = i+1\n",
    "    lambda_EMA = 2/(x+1)\n",
    "\n",
    "    \n",
    "    #z.append((sum(y)/len(y))*(1-lambda_EMA)+y[0]*lambda_EMA )  \n",
    "    \n",
    "    return (sum(y)/len(y))*(1-lambda_EMA)+y[0]*lambda_EMA \n",
    "EMA(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1160a48b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55.51202376237625"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def WMA(x): ## calcualte using weighted moving average \n",
    "    y=[]\n",
    "    z=[]\n",
    "    for i in range(x):      \n",
    "        y.append(random.randint(5000, 6000)/100)\n",
    "        z.append(y[i]*(x-i))\n",
    "        i=i+1 \n",
    "    return sum(z)/((x*(x+1))/2)\n",
    "WMA(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e841cffd",
   "metadata": {},
   "outputs": [],
   "source": [
    "d=[]\n",
    "e=[]\n",
    "f=[]\n",
    "g=[]\n",
    "for t in range (100):\n",
    "    d.append(AVE(1000)) \n",
    "    e.append(EMA(1000))\n",
    "    f.append(WMA(1000))\n",
    "    \n",
    "    t = t + 1 \n",
    "\n",
    "#simulate the result we obtaine in moving average, weighted moving average and \n",
    "## exponential moving average for 1000 times \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "09d46249",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x11ec10250>]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(d,color = 'red')\n",
    "plt.plot(e,color = 'orange')\n",
    "plt.plot(f,color = 'purple')\n",
    "# we plot the above simualitons "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5da53b88",
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_frame = pd.DataFrame()\n",
    "mean_frame['AVE']=d\n",
    "mean_frame['EMA']=e\n",
    "mean_frame['WMA']=f\n",
    "mean_frame['AVE-EMA']=mean_frame['AVE']-mean_frame['EMA']\n",
    "mean_frame['AVE-WMA']=mean_frame['AVE']-mean_frame['WMA']\n",
    "mean_frame['EMA-WMA']=mean_frame['EMA']-mean_frame['WMA']\n",
    "# we calculate the difference between each two of them,\n",
    "##and calcualte the means of three simulations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a8482fc8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AVE</th>\n",
       "      <th>EMA</th>\n",
       "      <th>WMA</th>\n",
       "      <th>AVE-EMA</th>\n",
       "      <th>AVE-WMA</th>\n",
       "      <th>EMA-WMA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>55.06066</td>\n",
       "      <td>54.956611</td>\n",
       "      <td>55.075020</td>\n",
       "      <td>0.104049</td>\n",
       "      <td>-0.014360</td>\n",
       "      <td>-0.118409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>55.11712</td>\n",
       "      <td>55.005143</td>\n",
       "      <td>55.081796</td>\n",
       "      <td>0.111977</td>\n",
       "      <td>0.035324</td>\n",
       "      <td>-0.076652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>55.06084</td>\n",
       "      <td>55.028404</td>\n",
       "      <td>54.875696</td>\n",
       "      <td>0.032436</td>\n",
       "      <td>0.185144</td>\n",
       "      <td>0.152709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>55.04587</td>\n",
       "      <td>54.955913</td>\n",
       "      <td>55.073805</td>\n",
       "      <td>0.089957</td>\n",
       "      <td>-0.027935</td>\n",
       "      <td>-0.117893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>54.97250</td>\n",
       "      <td>55.050386</td>\n",
       "      <td>55.018464</td>\n",
       "      <td>-0.077886</td>\n",
       "      <td>-0.045964</td>\n",
       "      <td>0.031923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>54.94567</td>\n",
       "      <td>54.961966</td>\n",
       "      <td>54.977603</td>\n",
       "      <td>-0.016296</td>\n",
       "      <td>-0.031933</td>\n",
       "      <td>-0.015637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>55.07525</td>\n",
       "      <td>54.915065</td>\n",
       "      <td>54.950364</td>\n",
       "      <td>0.160185</td>\n",
       "      <td>0.124886</td>\n",
       "      <td>-0.035298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>55.17623</td>\n",
       "      <td>55.070706</td>\n",
       "      <td>55.024955</td>\n",
       "      <td>0.105524</td>\n",
       "      <td>0.151275</td>\n",
       "      <td>0.045751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>55.00567</td>\n",
       "      <td>54.858159</td>\n",
       "      <td>55.006200</td>\n",
       "      <td>0.147511</td>\n",
       "      <td>-0.000530</td>\n",
       "      <td>-0.148041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>55.08502</td>\n",
       "      <td>54.807882</td>\n",
       "      <td>54.999687</td>\n",
       "      <td>0.277138</td>\n",
       "      <td>0.085333</td>\n",
       "      <td>-0.191804</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         AVE        EMA        WMA   AVE-EMA   AVE-WMA   EMA-WMA\n",
       "0   55.06066  54.956611  55.075020  0.104049 -0.014360 -0.118409\n",
       "1   55.11712  55.005143  55.081796  0.111977  0.035324 -0.076652\n",
       "2   55.06084  55.028404  54.875696  0.032436  0.185144  0.152709\n",
       "3   55.04587  54.955913  55.073805  0.089957 -0.027935 -0.117893\n",
       "4   54.97250  55.050386  55.018464 -0.077886 -0.045964  0.031923\n",
       "..       ...        ...        ...       ...       ...       ...\n",
       "95  54.94567  54.961966  54.977603 -0.016296 -0.031933 -0.015637\n",
       "96  55.07525  54.915065  54.950364  0.160185  0.124886 -0.035298\n",
       "97  55.17623  55.070706  55.024955  0.105524  0.151275  0.045751\n",
       "98  55.00567  54.858159  55.006200  0.147511 -0.000530 -0.148041\n",
       "99  55.08502  54.807882  54.999687  0.277138  0.085333 -0.191804\n",
       "\n",
       "[100 rows x 6 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "00dd83b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.008877797134657731 0.0074338394766722835 0.010335137639251419\n",
      "55.00499869999999 54.98977567302697 54.99951281938064\n"
     ]
    }
   ],
   "source": [
    "var_AVE = (mean_frame['AVE'].std(ddof=1))**2\n",
    "var_EMA = (mean_frame['EMA'].std(ddof=1))**2\n",
    "var_WMA = (mean_frame['WMA'].std(ddof=1))**2\n",
    "mean_AVE = mean_frame['AVE'].mean()\n",
    "mean_EMA = mean_frame['EMA'].mean()\n",
    "mean_WMA = mean_frame['WMA'].mean()\n",
    "print(var_AVE,var_EMA,var_WMA)\n",
    "print(mean_AVE,mean_EMA,mean_WMA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "04545f1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.1919341092226745 0.39577603956927265 -0.7304668030382471\n"
     ]
    }
   ],
   "source": [
    "n=100\n",
    "t_ave_ema = (mean_AVE - mean_EMA)/((var_AVE/n)+(var_EMA/n))**0.5\n",
    "t_ave_wma = (mean_AVE - mean_WMA)/((var_AVE/n)+(var_WMA/n))**0.5\n",
    "t_ema_wma = (mean_EMA - mean_WMA)/((var_EMA/n)+(var_WMA/n))**0.5\n",
    "print(t_ave_ema,t_ave_wma,t_ema_wma)\n",
    "# we conduct a test hypothesis. \n",
    "#   H0: there is difference between each two of them.\n",
    "#   Ha: there is no difference between each two of them. \n",
    "# we compuate the test statistics- F test. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "84a05eed",
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.stats as stats\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a4871114",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F_onewayResult(statistic=1.4207069207292993, pvalue=0.23471372763409157)\n",
      "F_onewayResult(statistic=0.15663867349805136, pvalue=0.6926963774718842)\n",
      "F_onewayResult(statistic=0.5335817503396633, pvalue=0.46596832511031183)\n"
     ]
    }
   ],
   "source": [
    "print(stats.f_oneway(mean_frame['AVE'],mean_frame['EMA']))\n",
    "print(stats.f_oneway(mean_frame['AVE'],mean_frame['WMA']))\n",
    "print(stats.f_oneway(mean_frame['EMA'],mean_frame['WMA']))\n",
    "\n",
    "# we can the p-val for three comparisons are smaller bigger than 5%,\n",
    "# we fail to reject the null, and there is no difference between each of them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0b2ed020",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([  1.,   6.,  28., 108., 183., 264., 217., 129.,  56.,   8.]),\n",
       " array([54.60438438, 54.67457957, 54.74477477, 54.81496996, 54.88516515,\n",
       "        54.95536035, 55.02555554, 55.09575074, 55.16594593, 55.23614113,\n",
       "        55.30633632]),\n",
       " <BarContainer object of 10 artists>)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "h=[]\n",
    "i=[]\n",
    "j=[]\n",
    "\n",
    "for t in range (1000):\n",
    "    h.append(AVE(1000))\n",
    "    i.append(EMA(1000))\n",
    "    j.append(WMA(1000))\n",
    "    \n",
    "    t = t + 1 \n",
    "\n",
    "plt.hist(h)\n",
    "plt.hist(i)\n",
    "plt.hist(j)\n",
    "# indeed, there all three simulations had a similar results as shwon in the histogram.\n",
    "# they all have a similar mean, and show the normality."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "80fad4a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Mvoing average, weighted moving average, exponential moving average have no differences w.r.t \n",
    "## their means and variances. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4e819237",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'base_url': '/', 'hostname': 'localhost', 'notebook_dir': '/Users/DanielLiu', 'password': False, 'pid': 21762, 'port': 8888, 'secure': False, 'sock': '', 'token': 'f7cef552e2fbed47d2eb5c7e924d517b7bb0828e2325b4d5', 'url': 'http://localhost:8888/'}]\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fc3afbe",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
